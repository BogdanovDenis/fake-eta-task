// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fake-eta-task/wait (interfaces: WaitService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWaitService is a mock of WaitService interface
type MockWaitService struct {
	ctrl     *gomock.Controller
	recorder *MockWaitServiceMockRecorder
}

// MockWaitServiceMockRecorder is the mock recorder for MockWaitService
type MockWaitServiceMockRecorder struct {
	mock *MockWaitService
}

// NewMockWaitService creates a new mock instance
func NewMockWaitService(ctrl *gomock.Controller) *MockWaitService {
	mock := &MockWaitService{ctrl: ctrl}
	mock.recorder = &MockWaitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWaitService) EXPECT() *MockWaitServiceMockRecorder {
	return m.recorder
}

// CalculateBestWaitingTime mocks base method
func (m *MockWaitService) CalculateBestWaitingTime(arg0 context.Context, arg1 []int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateBestWaitingTime", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateBestWaitingTime indicates an expected call of CalculateBestWaitingTime
func (mr *MockWaitServiceMockRecorder) CalculateBestWaitingTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateBestWaitingTime", reflect.TypeOf((*MockWaitService)(nil).CalculateBestWaitingTime), arg0, arg1)
}
